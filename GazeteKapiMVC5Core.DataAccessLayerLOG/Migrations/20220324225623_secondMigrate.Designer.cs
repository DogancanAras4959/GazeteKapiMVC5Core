// <auto-generated />
using System;
using GazeteKapiMVC5Core.DataAccessLayerLOG;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GazeteKapiMVC5Core.DataAccessLayerLOG.Migrations
{
    [DbContext(typeof(NewsAppContextLog))]
    [Migration("20220324225623_secondMigrate")]
    partial class secondMigrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DOMAIN.DataAccessLayerLOG.Models.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Hour")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessID");

                    b.HasIndex("TransactionID");

                    b.HasIndex("UserID");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("DOMAIN.DataAccessLayerLOG.Models.Processes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessesName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("processes");
                });

            modelBuilder.Entity("DOMAIN.DataAccessLayerLOG.Models.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TransactionNames")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("DOMAIN.DataAccessLayerLOG.Models.UsersLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UserNameLog")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("usersLogs");
                });

            modelBuilder.Entity("DOMAIN.DataAccessLayerLOG.Models.Logs", b =>
                {
                    b.HasOne("DOMAIN.DataAccessLayerLOG.Models.Processes", "processes")
                        .WithMany("logsByProccess")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.DataAccessLayerLOG.Models.Transactions", "transactions")
                        .WithMany("logsByTransactions")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.DataAccessLayerLOG.Models.UsersLog", "userslog")
                        .WithMany("logsByUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("processes");

                    b.Navigation("transactions");

                    b.Navigation("userslog");
                });

            modelBuilder.Entity("DOMAIN.DataAccessLayerLOG.Models.Processes", b =>
                {
                    b.Navigation("logsByProccess");
                });

            modelBuilder.Entity("DOMAIN.DataAccessLayerLOG.Models.Transactions", b =>
                {
                    b.Navigation("logsByTransactions");
                });

            modelBuilder.Entity("DOMAIN.DataAccessLayerLOG.Models.UsersLog", b =>
                {
                    b.Navigation("logsByUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
